generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id             BigInt             @id @default(autoincrement())
  role           Role
  email          String             @unique
  first_name     String?
  second_name    String?
  last_name      String?
  phone          String?            @unique
  created_at     DateTime           @default(now())
  active         Boolean            @default(true)
  password_hash  String?
  orders_created orders[]           @relation("OrdersCreatedBy")
  shipments      shipments[]        @relation("ShipmentsDriver")
  manager_links  shop_managers[]    @relation("UserShopManagers")
  stock_moves    shop_stock_moves[] @relation("StockMoveCreatedBy")

  @@map("users")
}

model shops {
  id            BigInt             @id @default(autoincrement())
  city          String
  street        String
  active        Boolean            @default(true)
  orders        orders[]           @relation("OrdersAtShop")
  shop_managers shop_managers[]
  stock         shop_stock[]
  stock_moves   shop_stock_moves[]

  @@map("shops")
}

model shop_managers {
  id      BigInt @id @default(autoincrement())
  user_id BigInt
  shop_id BigInt
  shop    shops  @relation(fields: [shop_id], references: [id], onDelete: Cascade)
  user    users  @relation("UserShopManagers", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([shop_id, user_id])
  @@index([user_id], map: "shop_managers_user_id_fkey")
  @@map("shop_managers")
}

model materials {
  id       BigInt             @id @default(autoincrement())
  name     String
  color    String
  active   Boolean            @default(true)
  variants product_variants[]

  @@map("materials")
}

model products {
  id          BigInt             @id @default(autoincrement())
  name        String
  description String
  category    ProductCategory
  active      Boolean            @default(true)
  width_mm    Int
  height_mm   Int
  depth_mm    Int
  variants    product_variants[]

  @@map("products")
}

model product_variants {
  id               BigInt             @id @default(autoincrement())
  product_id       BigInt
  material_id      BigInt
  price            Decimal            @db.Decimal(12, 2)
  active           Boolean            @default(true)
  sku              String
  order_items      order_items[]
  material         materials          @relation(fields: [material_id], references: [id])
  product          products           @relation(fields: [product_id], references: [id], onDelete: Cascade)
  shop_stock       shop_stock[]
  shop_stock_moves shop_stock_moves[]

  @@unique([product_id, material_id])
  @@index([product_id, active, price])
  @@index([material_id], map: "product_variants_material_id_fkey")
  @@map("product_variants")
}

model shop_stock {
  id                 BigInt           @id @default(autoincrement())
  shop_id            BigInt
  product_variant_id BigInt
  quantity           Int              @default(0)
  productVariant     product_variants @relation(fields: [product_variant_id], references: [id])
  shop               shops            @relation(fields: [shop_id], references: [id], onDelete: Cascade)

  @@unique([shop_id, product_variant_id])
  @@index([shop_id])
  @@index([product_variant_id], map: "shop_stock_product_variant_id_fkey")
  @@map("shop_stock")
}

model shop_stock_moves {
  id                 BigInt           @id @default(autoincrement())
  shop_id            BigInt
  product_variant_id BigInt
  qty_change         Int
  reason             StockMoveReason
  created_at         DateTime         @default(now())
  created_by         BigInt?
  createdByUser      users?           @relation("StockMoveCreatedBy", fields: [created_by], references: [id])
  productVariant     product_variants @relation(fields: [product_variant_id], references: [id])
  shop               shops            @relation(fields: [shop_id], references: [id], onDelete: Cascade)

  @@index([shop_id])
  @@index([product_variant_id])
  @@index([created_at])
  @@index([created_by], map: "shop_stock_moves_created_by_fkey")
  @@map("shop_stock_moves")
}

model orders {
  id                   BigInt              @id @default(autoincrement())
  created_by           BigInt?
  shop_id              BigInt?
  customer_name        String?
  customer_second_name String?
  customer_last_name   String?
  customer_phone       String?
  customer_email       String?
  delivery_type        DeliveryType
  status               OrderStatus
  note                 String?
  created_at           DateTime            @default(now())
  total_amount         Decimal             @default(0.00) @db.Decimal(12, 2)
  address              delivery_addresses?
  items                order_items[]
  createdBy            users?              @relation("OrdersCreatedBy", fields: [created_by], references: [id])
  shop                 shops?              @relation("OrdersAtShop", fields: [shop_id], references: [id])
  shipment_links       shipment_orders[]

  @@index([status])
  @@index([created_at])
  @@index([shop_id])
  @@index([created_by], map: "orders_created_by_fkey")
  @@map("orders")
}

model delivery_addresses {
  id        BigInt  @id @default(autoincrement())
  order_id  BigInt  @unique
  city      String
  street    String
  house     String
  floor     String?
  apartment String?
  entrance  String?
  order     orders  @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("delivery_addresses")
}

model order_items {
  id                 BigInt           @id @default(autoincrement())
  order_id           BigInt
  product_variant_id BigInt
  unit_price         Decimal          @db.Decimal(12, 2)
  quantity           Int
  is_from_shop_stock Boolean          @default(false)
  line_total         Decimal          @db.Decimal(12, 2)
  order              orders           @relation(fields: [order_id], references: [id], onDelete: Cascade)
  productVariant     product_variants @relation(fields: [product_variant_id], references: [id])

  @@index([order_id])
  @@index([product_variant_id], map: "order_items_product_variant_id_fkey")
  @@map("order_items")
}

model shipments {
  id          BigInt            @id @default(autoincrement())
  driver_id   BigInt
  planned_at  DateTime
  status      ShipmentStatus
  route_hint  String
  started_at  DateTime
  finished_at DateTime
  comment     String?
  orders      shipment_orders[]
  driver      users             @relation("ShipmentsDriver", fields: [driver_id], references: [id])

  @@index([status])
  @@index([planned_at])
  @@index([driver_id], map: "shipments_driver_id_fkey")
  @@map("shipments")
}

model shipment_orders {
  id          BigInt    @id @default(autoincrement())
  shipment_id BigInt
  order_id    BigInt
  order       orders    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  shipment    shipments @relation(fields: [shipment_id], references: [id], onDelete: Cascade)

  @@unique([shipment_id, order_id])
  @@index([order_id], map: "shipment_orders_order_id_fkey")
  @@map("shipment_orders")
}

/// *
///  * ===================== ENUMS =====================
enum Role {
  customer
  manager
  driver
  factory_worker
  admin
}

enum ProductCategory {
  SOFA
  ARMCHAIR
  PUFF
  BED
  TABLE
  CHAIR
  OTHER
}

enum OrderStatus {
  created
  in_production
  ready_to_ship
  in_transit
  delivered
  cancelled
}

enum DeliveryType {
  pickup
  home_delivery
}

enum ShipmentStatus {
  planned
  in_transit
  delivered
  cancelled
}

enum StockMoveReason {
  receipt
  sale
  order_pickup
  adjustment
}
